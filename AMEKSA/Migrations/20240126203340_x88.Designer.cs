// <auto-generated />
using System;
using AMEKSA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMEKSA.Migrations
{
    [DbContext(typeof(DbContainer))]
    [Migration("20240126203340_x88")]
    partial class x88
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AMEKSA.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("BestTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BestTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<float>("CreditLimit")
                        .HasColumnType("real");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("NumberOfDoctors")
                        .HasColumnType("smallint");

                    b.Property<string>("PaymentNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("PurchaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PurchaseTypeId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountBalance");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountBrandPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<decimal>("Collection")
                        .HasColumnType("money");

                    b.Property<decimal>("Openning")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountBrandPayment");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountDevices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ServiceContract")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Warranty")
                        .HasColumnType("datetime2");

                    b.Property<bool>("bulk")
                        .HasColumnType("bit");

                    b.Property<Guid>("guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("accountDevices");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmittingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("accountMedicalVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ManagerCommentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RepReplyDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("accountMedicalVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonPosition")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.ToTable("accountMedicalVisitPerson");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.HasIndex("ProductId");

                    b.ToTable("accountMedicalVisitProducts");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountSalesVisitId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountSupportiveVisitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountMedicalVisitId");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("AccountSupportiveVisitId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("accountMonthlyPlan");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlanCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountMonthlyPlanId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<float?>("Collection")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountMonthlyPlanId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountMonthlyPlanCollection");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("SubmittingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmittingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("accountSalesVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSalesVisitId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountSalesVisitBrand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSalesVisitId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ManagerCommentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RepReplyDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("accountSalesVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSalesVisitId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<float>("Collection")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountSalesVisitCollection");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSalesVisitId")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonPosition")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.ToTable("accountSalesVisitPerson");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmittingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("AccountSupportiveVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSupportiveVisitId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ManagerCommentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RepReplyDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountSupportiveVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("AccountSupportiveVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisitPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSupportiveVisitId")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonPosition")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSupportiveVisitId");

                    b.ToTable("AccountSupportiveVisitPerson");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisitProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSupportVisitId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("accountsupportivevisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("accountsupportivevisitId");

                    b.ToTable("AccountSupportiveVisitproduct");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("accountType");
                });

            modelBuilder.Entity("AMEKSA.Entities.Attend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Attendd")
                        .HasColumnType("bit");

                    b.Property<bool>("Came")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("why")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("attend");
                });

            modelBuilder.Entity("AMEKSA.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("AMEKSA.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("city");
                });

            modelBuilder.Entity("AMEKSA.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("BestTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BestTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guidd")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hsan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandLineNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PurchaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PurchaseTypeId");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Requests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("SubmittingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmittingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("contactMedicalVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ManagerCommentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RepReplyDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("contactMedicalVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<byte>("NumberOfSamples")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("ProductShare")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("ProductId");

                    b.ToTable("contactMedicalVisitProduct");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMonthlyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("contactMonthlyPlan");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactSalesAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactMedicalVisitId")
                        .HasColumnType("int");

                    b.Property<int>("SalesAidId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("SalesAidId");

                    b.ToTable("contactSalesAid");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("contactType");
                });

            modelBuilder.Entity("AMEKSA.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("district");
                });

            modelBuilder.Entity("AMEKSA.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<int>("TravelCitiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("TravelCitiesId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventtId")
                        .HasColumnType("int");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("file")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventtId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("eventFees");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventFeesRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventtId")
                        .HasColumnType("int");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("file")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventtId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("eventFeesRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventProposalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TopAction")
                        .HasColumnType("bit");

                    b.Property<string>("TopActionUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TopConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("TopRejected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EventId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.HasIndex("TopActionUserId");

                    b.ToTable("EventProposalRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventSpeaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventSpeaker");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventTravelRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Accumpained")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("FirstActionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HotelEdited")
                        .HasColumnType("bit");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPassport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTicket")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PassportExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportFileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketFileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TopAction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TopActionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopActionUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TopConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("TopRejected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WayInArrival")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WayInCityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WayInDeparture")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WayInDestinationId")
                        .HasColumnType("int");

                    b.Property<string>("WayInFlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WayOutArrival")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WayOutCityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WayOutDeparture")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WayOutDestinationId")
                        .HasColumnType("int");

                    b.Property<string>("WayOutFlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EventId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.HasIndex("TopActionUserId");

                    b.HasIndex("WayInCityId");

                    b.HasIndex("WayInDestinationId");

                    b.HasIndex("WayOutCityId");

                    b.HasIndex("WayOutDestinationId");

                    b.ToTable("EventTravelRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("AMEKSA.Entities.ImcasComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("imcasComment");
                });

            modelBuilder.Entity("AMEKSA.Entities.Invited", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("invited");
                });

            modelBuilder.Entity("AMEKSA.Entities.JeddaDermBoth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutWhatQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clinic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("jeddaDermBoth");
                });

            modelBuilder.Entity("AMEKSA.Entities.JeddahDerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HSAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComing")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<Guid>("guidd")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("workshop")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("jeddahDerm");
                });

            modelBuilder.Entity("AMEKSA.Entities.MagellanDayAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("magellanDayAttendance");
                });

            modelBuilder.Entity("AMEKSA.Entities.MaintenanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountDevicesId")
                        .HasColumnType("int");

                    b.Property<string>("ClientResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandLineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagementResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountDevicesId");

                    b.ToTable("maintenanceRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("AMEKSA.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExtendIdetityUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NitificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extendidentityuserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("extendidentityuserId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("AMEKSA.Entities.OpenningRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountBrandPaymentId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestedOpenning")
                        .HasColumnType("money");

                    b.Property<int?>("openningrequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.HasIndex("openningrequestId");

                    b.ToTable("openningRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.PasswordChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("passwordChange");
                });

            modelBuilder.Entity("AMEKSA.Entities.Passwords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("passwords");
                });

            modelBuilder.Entity("AMEKSA.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("AMEKSA.Entities.Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("AMEKSA.Entities.PurchaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PurchaseTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("purchaseType");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestChangeContactCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryFromId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryToId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("requestChangeCategory");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestChangeContactTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NewTarget")
                        .HasColumnType("int");

                    b.Property<int>("OldTarget")
                        .HasColumnType("int");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("requestChangeContactTargets");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountMedical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountMedicalVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.ToTable("requestDeleteAccountMedical");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSalesVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.ToTable("requestDeleteAccountSales");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountSupportive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountSupportiveVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountSupportiveVisitId");

                    b.ToTable("RequestDeleteAccountSupportive");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteContactMedical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactMedicalVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.ToTable("requestDeleteContactMedical");
                });

            modelBuilder.Entity("AMEKSA.Entities.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("extendidentityroleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("extendidentityroleId");

                    b.ToTable("roleMenu");
                });

            modelBuilder.Entity("AMEKSA.Entities.Saam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HSAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComing")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<Guid>("guidd")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("saam");
                });

            modelBuilder.Entity("AMEKSA.Entities.SalesAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SalesAidName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("salesAid");
                });

            modelBuilder.Entity("AMEKSA.Entities.SaudiDerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HSAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComing")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<Guid>("guidd")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("saudiDerm");
                });

            modelBuilder.Entity("AMEKSA.Entities.StringProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stringProperties");
                });

            modelBuilder.Entity("AMEKSA.Entities.TED", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attend")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AttendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotComing")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<bool>("Sms")
                        .HasColumnType("bit");

                    b.Property<Guid>("guidd")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ted");
                });

            modelBuilder.Entity("AMEKSA.Entities.TimeOffTerritoryReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("timeOffTerrirtoryReasons");
                });

            modelBuilder.Entity("AMEKSA.Entities.TrainingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountDevicesId")
                        .HasColumnType("int");

                    b.Property<string>("ClientResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandLineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagementResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountDevicesId");

                    b.ToTable("trainingRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.TravelCities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("travelCities");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("userAccount");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("userBrand");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyTarget")
                        .HasColumnType("int");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("userContact");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserSubmanager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("UserSubmanager");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserTimeOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeOffTerritoryReasonsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.HasIndex("TimeOffTerritoryReasonsId");

                    b.ToTable("userTimeOff");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserVisitsLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("ExtendIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("usersVisitsLimit");
                });

            modelBuilder.Entity("AMEKSA.Entities.VacancyRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<int>("TimeOffTerritoryReasonsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacancyDateTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VacancyDateTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TimeOffTerritoryReasonsId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("vacancyRequests");
                });

            modelBuilder.Entity("AMEKSA.Entities.WorkingDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfWorkingDays")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("workingDays");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("extendidentityuserid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RepId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AMEKSA.Entities.Account", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountType", "accounttype")
                        .WithMany("account")
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("AMEKSA.Entities.Category", "category")
                        .WithMany("account")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AMEKSA.Entities.District", "district")
                        .WithMany("account")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AMEKSA.Entities.PurchaseType", "purchasetype")
                        .WithMany("account")
                        .HasForeignKey("PurchaseTypeId");

                    b.Navigation("accounttype");

                    b.Navigation("category");

                    b.Navigation("district");

                    b.Navigation("purchasetype");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountBalance", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountbalance")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountbalance")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountBrandPayment", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountbrandpayment")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountbrandpayment")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountDevices", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("product");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountmedicalvisit")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany("accountmedicalvisit2")
                        .HasForeignKey("ManagerId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("accountmedicalvisit")
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("Manager");

                    b.Navigation("account");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "AccountMedicalVisit")
                        .WithMany()
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");

                    b.Navigation("AccountMedicalVisit");

                    b.Navigation("Manager");

                    b.Navigation("Rep");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitPerson", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "accountmedicalvisit")
                        .WithMany("accountmedicalvisitperson")
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountmedicalvisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitProducts", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "accountmedicalvisit")
                        .WithMany("accountmedicalvisitproducts")
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Product", "product")
                        .WithMany("accountmedicalvisitproducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountmedicalvisit");

                    b.Navigation("product");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlan", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "AccountMedicalVisit")
                        .WithMany()
                        .HasForeignKey("AccountMedicalVisitId");

                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany()
                        .HasForeignKey("AccountSalesVisitId");

                    b.HasOne("AMEKSA.Entities.AccountSupportiveVisit", "AccountSupportiveVisit")
                        .WithMany()
                        .HasForeignKey("AccountSupportiveVisitId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("AccountMedicalVisit");

                    b.Navigation("AccountSupportiveVisit");

                    b.Navigation("account");

                    b.Navigation("accountsalesvisit");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlanCollection", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMonthlyPlan", "accountMonthlyPlan")
                        .WithMany("accountMonthlyPlanCollection")
                        .HasForeignKey("AccountMonthlyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountMonthlyPlanCollection")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountMonthlyPlan");

                    b.Navigation("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountsalesvisit")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany("accountsalesvisit2")
                        .HasForeignKey("ManagerId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("accountsalesvisit")
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("Manager");

                    b.Navigation("account");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitBrand", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany("accountsalesvisitbrand")
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountsalesvisitbrand")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountsalesvisit");

                    b.Navigation("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "AccountSalesVisit")
                        .WithMany()
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");

                    b.Navigation("AccountSalesVisit");

                    b.Navigation("Manager");

                    b.Navigation("Rep");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitCollection", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany("accountSalesVisitCollection")
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountSalesVisitCollection")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountsalesvisit");

                    b.Navigation("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitPerson", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany("accountsalesvisitperson")
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountsalesvisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany("accountsupportivevisit2")
                        .HasForeignKey("ManagerId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("Manager");

                    b.Navigation("account");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSupportiveVisit", "AccountSupportiveVisit")
                        .WithMany()
                        .HasForeignKey("AccountSupportiveVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");

                    b.Navigation("AccountSupportiveVisit");

                    b.Navigation("Manager");

                    b.Navigation("Rep");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisitPerson", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSupportiveVisit", "accountsupportivevisit")
                        .WithMany("accountsupportivevisitperson")
                        .HasForeignKey("AccountSupportiveVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountsupportivevisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisitProduct", b =>
                {
                    b.HasOne("AMEKSA.Entities.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.AccountSupportiveVisit", "accountsupportivevisit")
                        .WithMany("accountsupportivevisitproduct")
                        .HasForeignKey("accountsupportivevisitId");

                    b.Navigation("accountsupportivevisit");

                    b.Navigation("product");
                });

            modelBuilder.Entity("AMEKSA.Entities.Attend", b =>
                {
                    b.HasOne("AMEKSA.Entities.City", "city")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("city");
                });

            modelBuilder.Entity("AMEKSA.Entities.Contact", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("contact")
                        .HasForeignKey("AccountId");

                    b.HasOne("AMEKSA.Entities.Category", null)
                        .WithMany("contact")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AMEKSA.Entities.ContactType", "contacttype")
                        .WithMany("contact")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("AMEKSA.Entities.District", "district")
                        .WithMany("contact")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AMEKSA.Entities.PurchaseType", "purchasetype")
                        .WithMany("contact")
                        .HasForeignKey("PurchaseTypeId");

                    b.Navigation("account");

                    b.Navigation("contacttype");

                    b.Navigation("district");

                    b.Navigation("purchasetype");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany("contactmedicalvisit")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany("contactmedicalvisit2")
                        .HasForeignKey("ManagerId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("contactmedicalvisit")
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("Manager");

                    b.Navigation("contact");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "ContactMedicalVisit")
                        .WithMany()
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");

                    b.Navigation("ContactMedicalVisit");

                    b.Navigation("Manager");

                    b.Navigation("Rep");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitProduct", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactvisitmedical")
                        .WithMany("contactmedicalvisitproduct")
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Product", "product")
                        .WithMany("contactmedicalvisitproduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contactvisitmedical");

                    b.Navigation("product");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMonthlyPlan", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactmedicalvisit")
                        .WithMany()
                        .HasForeignKey("ContactMedicalVisitId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("contact");

                    b.Navigation("contactmedicalvisit");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactSalesAid", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactmedicalvisit")
                        .WithMany("contactsalesaid")
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.SalesAid", "salesaid")
                        .WithMany("contactsalesaid")
                        .HasForeignKey("SalesAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contactmedicalvisit");

                    b.Navigation("salesaid");
                });

            modelBuilder.Entity("AMEKSA.Entities.District", b =>
                {
                    b.HasOne("AMEKSA.Entities.City", "city")
                        .WithMany("district")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("AMEKSA.Entities.Event", b =>
                {
                    b.HasOne("AMEKSA.Entities.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.TravelCities", "TravelCities")
                        .WithMany()
                        .HasForeignKey("TravelCitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("TravelCities");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventFees", b =>
                {
                    b.HasOne("AMEKSA.Entities.Event", "eventt")
                        .WithMany()
                        .HasForeignKey("EventtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("eventt");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventFeesRequest", b =>
                {
                    b.HasOne("AMEKSA.Entities.Event", "eventt")
                        .WithMany()
                        .HasForeignKey("EventtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("eventt");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventProposalRequest", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Event", "eventt")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "TopActionUser")
                        .WithMany()
                        .HasForeignKey("TopActionUserId");

                    b.Navigation("TopActionUser");

                    b.Navigation("contact");

                    b.Navigation("eventt");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventSpeaker", b =>
                {
                    b.HasOne("AMEKSA.Entities.Event", "Event")
                        .WithMany("speakers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMEKSA.Entities.EventTravelRequest", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Entities.Event", "eventt")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "TopActionUser")
                        .WithMany()
                        .HasForeignKey("TopActionUserId");

                    b.HasOne("AMEKSA.Entities.TravelCities", "WayInCity")
                        .WithMany()
                        .HasForeignKey("WayInCityId");

                    b.HasOne("AMEKSA.Entities.TravelCities", "WayInDestination")
                        .WithMany()
                        .HasForeignKey("WayInDestinationId");

                    b.HasOne("AMEKSA.Entities.TravelCities", "WayOutCity")
                        .WithMany()
                        .HasForeignKey("WayOutCityId");

                    b.HasOne("AMEKSA.Entities.TravelCities", "WayOutDestination")
                        .WithMany()
                        .HasForeignKey("WayOutDestinationId");

                    b.Navigation("TopActionUser");

                    b.Navigation("WayInCity");

                    b.Navigation("WayInDestination");

                    b.Navigation("WayOutCity");

                    b.Navigation("WayOutDestination");

                    b.Navigation("contact");

                    b.Navigation("eventt");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.JeddaDermBoth", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.JeddahDerm", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.MaintenanceRequest", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountDevices", "accountDevices")
                        .WithMany()
                        .HasForeignKey("AccountDevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountDevices");
                });

            modelBuilder.Entity("AMEKSA.Entities.Notifications", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("extendidentityuserId");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.OpenningRequest", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.HasOne("AMEKSA.Entities.OpenningRequest", "openningrequest")
                        .WithMany()
                        .HasForeignKey("openningrequestId");

                    b.Navigation("extendidentityuser");

                    b.Navigation("openningrequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.PasswordChange", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendIdentityUser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("extendIdentityUser");
                });

            modelBuilder.Entity("AMEKSA.Entities.Product", b =>
                {
                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("product")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestChangeContactCategory", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestChangeContactTarget", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "rep")
                        .WithMany()
                        .HasForeignKey("RepId");

                    b.Navigation("contact");

                    b.Navigation("manager");

                    b.Navigation("rep");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountMedical", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "accountmedicalvisit")
                        .WithMany()
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountmedicalvisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountSales", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "AccountSalesVisit")
                        .WithMany()
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSalesVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountSupportive", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSupportiveVisit", "accountsupportivevisit")
                        .WithMany()
                        .HasForeignKey("AccountSupportiveVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountsupportivevisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteContactMedical", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactmedicalvisit")
                        .WithMany()
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contactmedicalvisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.RoleMenu", b =>
                {
                    b.HasOne("AMEKSA.Entities.Menu", "menu")
                        .WithMany("rolemenu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityRole", "extendidentityrole")
                        .WithMany("rolemenu")
                        .HasForeignKey("extendidentityroleId");

                    b.Navigation("extendidentityrole");

                    b.Navigation("menu");
                });

            modelBuilder.Entity("AMEKSA.Entities.Saam", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.SaudiDerm", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.TED", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.TrainingRequest", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountDevices", "accountDevices")
                        .WithMany()
                        .HasForeignKey("AccountDevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountDevices");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserAccount", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("useraccount")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("useraccount")
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("account");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserBrand", b =>
                {
                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("userbrand")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("userbrand")
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("brand");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserContact", b =>
                {
                    b.HasOne("AMEKSA.Entities.Category", "category")
                        .WithMany("userContact")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany("usercontact")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("usercontact")
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("category");

                    b.Navigation("contact");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserSubmanager", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany("Managers")
                        .HasForeignKey("ManagerId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany("Reps")
                        .HasForeignKey("RepId");

                    b.Navigation("Manager");

                    b.Navigation("Rep");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserTimeOff", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.HasOne("AMEKSA.Entities.TimeOffTerritoryReasons", "timeoffterritroyreasons")
                        .WithMany()
                        .HasForeignKey("TimeOffTerritoryReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("extendidentityuser");

                    b.Navigation("timeoffterritroyreasons");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserVisitsLimit", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("AMEKSA.Entities.VacancyRequests", b =>
                {
                    b.HasOne("AMEKSA.Entities.TimeOffTerritoryReasons", "timeoffterritoryreasons")
                        .WithMany()
                        .HasForeignKey("TimeOffTerritoryReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("extendidentityuser");

                    b.Navigation("timeoffterritoryreasons");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityUser", b =>
                {
                    b.HasOne("AMEKSA.Entities.City", "city")
                        .WithMany("extendIdentityUsers")
                        .HasForeignKey("CityId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("extendidentityuserid");

                    b.Navigation("Rep");

                    b.Navigation("city");

                    b.Navigation("extendidentityuser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AMEKSA.Entities.Account", b =>
                {
                    b.Navigation("accountbalance");

                    b.Navigation("accountbrandpayment");

                    b.Navigation("accountmedicalvisit");

                    b.Navigation("accountsalesvisit");

                    b.Navigation("contact");

                    b.Navigation("useraccount");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisit", b =>
                {
                    b.Navigation("accountmedicalvisitperson");

                    b.Navigation("accountmedicalvisitproducts");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlan", b =>
                {
                    b.Navigation("accountMonthlyPlanCollection");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisit", b =>
                {
                    b.Navigation("accountSalesVisitCollection");

                    b.Navigation("accountsalesvisitbrand");

                    b.Navigation("accountsalesvisitperson");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSupportiveVisit", b =>
                {
                    b.Navigation("accountsupportivevisitperson");

                    b.Navigation("accountsupportivevisitproduct");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountType", b =>
                {
                    b.Navigation("account");
                });

            modelBuilder.Entity("AMEKSA.Entities.Brand", b =>
                {
                    b.Navigation("accountMonthlyPlanCollection");

                    b.Navigation("accountSalesVisitCollection");

                    b.Navigation("accountbalance");

                    b.Navigation("accountbrandpayment");

                    b.Navigation("accountsalesvisitbrand");

                    b.Navigation("product");

                    b.Navigation("userbrand");
                });

            modelBuilder.Entity("AMEKSA.Entities.Category", b =>
                {
                    b.Navigation("account");

                    b.Navigation("contact");

                    b.Navigation("userContact");
                });

            modelBuilder.Entity("AMEKSA.Entities.City", b =>
                {
                    b.Navigation("district");

                    b.Navigation("extendIdentityUsers");
                });

            modelBuilder.Entity("AMEKSA.Entities.Contact", b =>
                {
                    b.Navigation("contactmedicalvisit");

                    b.Navigation("usercontact");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisit", b =>
                {
                    b.Navigation("contactmedicalvisitproduct");

                    b.Navigation("contactsalesaid");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactType", b =>
                {
                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.District", b =>
                {
                    b.Navigation("account");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.Event", b =>
                {
                    b.Navigation("speakers");
                });

            modelBuilder.Entity("AMEKSA.Entities.Menu", b =>
                {
                    b.Navigation("rolemenu");
                });

            modelBuilder.Entity("AMEKSA.Entities.Product", b =>
                {
                    b.Navigation("accountmedicalvisitproducts");

                    b.Navigation("contactmedicalvisitproduct");
                });

            modelBuilder.Entity("AMEKSA.Entities.PurchaseType", b =>
                {
                    b.Navigation("account");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.SalesAid", b =>
                {
                    b.Navigation("contactsalesaid");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityRole", b =>
                {
                    b.Navigation("rolemenu");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityUser", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("Reps");

                    b.Navigation("accountmedicalvisit");

                    b.Navigation("accountmedicalvisit2");

                    b.Navigation("accountsalesvisit");

                    b.Navigation("accountsalesvisit2");

                    b.Navigation("accountsupportivevisit2");

                    b.Navigation("contactmedicalvisit");

                    b.Navigation("contactmedicalvisit2");

                    b.Navigation("useraccount");

                    b.Navigation("userbrand");

                    b.Navigation("usercontact");
                });
#pragma warning restore 612, 618
        }
    }
}
